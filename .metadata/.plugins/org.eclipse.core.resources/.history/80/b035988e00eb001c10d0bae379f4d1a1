package application;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

import map.TileManager;
import sprite.KFetMan;
import sprite.Player;
import sprite.Sprite;
import object.Object;

public class GamePanel extends JPanel implements Runnable {	
	public final int TILE_SIZE = 48;
	public final int SCREEN_COL = 16;
	public final int SCREEN_ROW = 12;
	public final int SCREEN_WIDTH = TILE_SIZE * SCREEN_COL;
	public final int SCREEN_HEIGHT = TILE_SIZE * SCREEN_ROW;
	public final int MAP_COL = 28;
	public final int MAP_ROW = 25;
	public final int MAP_WIDTH = TILE_SIZE * MAP_COL;
	public final int MAP_HEIGHT = TILE_SIZE * MAP_COL;
	public final int FPS = 60;
	public final int MAIN_MENU = -1;
	public final int PAUSE = 0;
	public final int PLAY = 1;
	public final int DIALOGUE = 2;
	public final int BATTLE = 3;
	public final int BAG = 4;
	public final int KFET = 5;
	public final int NEW_GAME = 6;
	public final int TOILETS = 7;
	
	public KeyHandler keyHandler = new KeyHandler(this);
	Thread gameThread;
	TileManager tileManager = new TileManager(this);
	public CollisionDetector collisionDetector = new CollisionDetector(this);
	AssetManager assetManager = new AssetManager(this);
	public HUD hud = new HUD(this);
	public Save save = new Save(this);
	
	public Player player = new Player(this, keyHandler, "?", true);
	
	public Object object[] = new Object[30];
	
	public Sprite npc[] = new Sprite[10];
	
	public KFetMan nicolas = new KFetMan(this);
	
	private int gameState;
	
	
	public GamePanel() {
		this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyHandler);
		this.setFocusable(true);
	}

	public void gameSetup() {
		assetManager.setNPC();
		npc[1] = nicolas;
		assetManager.setObject();
		//gameState = MAIN_MENU;
		player = new Player(this, keyHandler, "?", true);
	}

	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
	
	@Override
	public void run() {
		
		double drawInterval = 1000000000/FPS;
		double delta = 0;
		long lastTime = System.nanoTime();
		long currentTime;
		/*
		 * long timer = 0; int drawCount = 0;
		 */
		
		while(gameThread != null) {
			currentTime = System.nanoTime();
			delta += (currentTime - lastTime) / drawInterval;
			/* timer += (currentTime - lastTime); */
			lastTime = currentTime;
			if(delta >= 1) {
				update();
				repaint();
				delta--;
				/* drawCount++; */
			}
			
			//Show FPS
			/*
			 * if(timer >= 1000000000) { System.out.println("FPS : " + drawCount); drawCount
			 * = 0; timer = 0; }
			 */
		}
	}
	
	public void update() {
		if(gameState == PLAY) {
			player.update();
		
			for(int i = 0; i < npc.length; i++) {
				if(npc[i] != null)
					npc[i].update();
			}
		}
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D)g;
		
		if(gameState == MAIN_MENU || gameState == BATTLE || gameState == NEW_GAME)
			hud.draw(g2);
		else {
			tileManager.draw(g2);
			
			for(int i = 0; i < object.length; i++) {
				if(object[i] != null)
					object[i].draw(g2, this);
			}
			
			for(int i = 0; i < npc.length; i++) {
				if(npc[i] != null)
					npc[i].draw(g2);
			}
			
			player.draw(g2);
			
			hud.draw(g2);
		}
		
		g2.dispose();
	}
	
	public int getGameState() {
		return this.gameState;
	}
	
	public void setGameState(int gameState) {
		this.gameState = gameState;
	}
}
